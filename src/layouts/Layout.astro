---

import { Header } from '../components/header';
import { Footer } from '../components/footer'
import "../styles/globals.css"

interface Props {
  title: string;
  description?: string;
  categories?: Record<string, number>; // 1. Adicionar tipo para categories
}

// 2. Corrigir a desestrutura√ß√£o para usar categories
const { 
  title, 
  description = "Blog Kodiak ERP - Insights sobre Gest√£o Industrial", 
  categories = {} 
} = Astro.props;

const popularPosts = [
  {
    title: "Como Implementar um ERP com Sucesso",
    date: "2024-02-20",
    url: "/posts/implementar-erp-sucesso"
  },
  {
    title: "Tend√™ncias de Automa√ß√£o Industrial",
    date: "2024-02-18",
    url: "/posts/tendencias-automacao"
  },
  {
    title: "Guia de Gest√£o de Produ√ß√£o",
    date: "2024-02-15",
    url: "/posts/guia-gestao-producao"
  },
  {
    title: "Ind√∫stria 4.0 na Pr√°tica",
    date: "2024-02-12",
    url: "/posts/analise-dados-industria-4"
  },
  {
    title: "Melhores Pr√°ticas em ERP",
    date: "2024-02-10",
    url: "/posts/melhores-praticas-erp"
  }
];

---

<!doctype html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />
  </head>
  <body class="min-h-screen bg-gray-50">
  <Header client:load/>

    <!-- Main Content -->
    <div class="mx-auto mt-16 px-4 sm:px-6 lg:px-8 py-12">
      <div class="flex flex-col lg:flex-row gap-8">
        <!-- Sidebar -->
        <aside class="lg:w-80 space-y-8">
          <!-- Search Bar -->
          <div class="bg-white rounded-lg shadow p-6">
            <form id="search-form" class="space-y-4">
              <div class="relative">
                <input
                  type="search"
                  id="search-input"
                  placeholder="Buscar not√≠cias..."
                  class="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
                <i class="fas fa-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"></i>
              </div>
            </form>
            <div id="search-results" class="mt-4 space-y-4 hidden">
              <!-- Results will be populated here -->
            </div>
          </div>

          <!-- Newsletter Signup -->
          <div class="bg-white rounded-lg shadow p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Receba Nossas Not√≠cias</h3>
            <form class="space-y-4">
              <input
                type="email"
                placeholder="Seu melhor e-mail"
                class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
              <button
                type="submit"
                class="w-full py-3 px-4 text-center text-white bg-blue-600 hover:bg-blue-700 rounded-lg font-medium"
              >
                Inscrever-se
              </button>
            </form>
          </div>

          <!-- Categories -->
          <div class="bg-white rounded-lg shadow p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Categorias</h3>
            <ul id="category-list" class="space-y-2">
              <li>
                <button class="w-full category-filter text-gray-600 hover:text-blue-600" data-category="all">
                  <span>Todos</span>
                </button>
              </li>
              {Object.entries(categories).map(([category, count]) => (
                <li class="flex items-center">
                  <button class="category-filter w-full flex justify-between items-center text-gray-600 hover:text-blue-600" data-category={category}>
                    <span>{category}</span>
                    <span class="bg-gray-100 text-gray-700 px-2 py-1 rounded-full text-sm">{count}</span>
                  </button>
                </li>
              ))}
            </ul>
          </div>

          <!-- Popular Posts -->
          <div class="bg-white rounded-lg shadow p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Posts Populares</h3>
            <ul class="space-y-4">
              {popularPosts.map(post => (
                <li>
                  <a href={post.url} class="group">
                    <h4 class="text-gray-900 group-hover:text-blue-600 font-medium mb-1">
                      {post.title}
                    </h4>
                    <p class="text-sm text-gray-500">{post.date}</p>
                  </a>
                </li>
              ))}
            </ul>
          </div>
        </aside>

        <!-- Main Content Area -->
        <main class="lg:flex-1">
          <slot />
        </main>
      </div>
    </div>

    <!-- Footer -->
    <!-- <footer class="bg-gray-900 text-white py-12">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-8">
          <div>
            <h3 class="text-xl font-semibold mb-4">Sobre N√≥s</h3>
            <p class="text-gray-400">
              Solu√ß√µes inteligentes para gest√£o industrial com o Kodiak ERP.
            </p>
          </div>
          <div>
            <h3 class="text-xl font-semibold mb-4">Links √öteis</h3>
            <ul class="space-y-2">
              <li><a href="/blog" class="text-gray-400 hover:text-white">Blog</a></li>
              <li><a href="/casos-sucesso" class="text-gray-400 hover:text-white">Casos de Sucesso</a></li>
              <li><a href="/recursos" class="text-gray-400 hover:text-white">Recursos</a></li>
            </ul>
          </div>
          <div>
            <h3 class="text-xl font-semibold mb-4">Legal</h3>
            <ul class="space-y-2">
              <li><a href="/termos" class="text-gray-400 hover:text-white">Termos de Uso</a></li>
              <li><a href="/privacidade" class="text-gray-400 hover:text-white">Pol√≠tica de Privacidade</a></li>
              <li><a href="/cookies" class="text-gray-400 hover:text-white">Pol√≠tica de Cookies</a></li>
            </ul>
          </div>
          <div>
            <h3 class="text-xl font-semibold mb-4">Newsletter</h3>
            <p class="text-gray-400 mb-4">Receba novidades e atualiza√ß√µes</p>
            <form class="space-y-2">
              <input
                type="email"
                placeholder="Seu e-mail"
                class="w-full px-4 py-2 rounded text-gray-900"
              />
              <button
                type="submit"
                class="w-full px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
              >
                Assinar
              </button>
            </form>
          </div>
        </div>
        <div class="mt-8 pt-8 border-t border-gray-800 text-center text-gray-400">
          <p>&copy; 2024 Kodiak ERP. Todos os direitos reservados.</p>
        </div>
      </div>
    </footer> -->
    <Footer />
  </body>
</html>

<style is:global>
  html {
    font-family: system-ui, sans-serif;
    scroll-behavior: smooth;
  }
</style>

<script>
  // Types
  interface User {
    id: string;
    email: string;
    name: string;
  }

  // Search functionality
  const searchForm = document.getElementById('search-form');
  const searchInput = document.getElementById('search-input') as HTMLInputElement;
  const searchResults = document.getElementById('search-results');
  let searchTimeout: ReturnType<typeof setTimeout>;

  searchInput?.addEventListener('input', (e) => {
    const input = e.target as HTMLInputElement;
    clearTimeout(searchTimeout);

    if (input.value.trim() === '') {
      if (searchResults) searchResults.classList.add('hidden');
      return;
    }

    // Debounce search
    searchTimeout = setTimeout(async () => {
      try {
        const response = await fetch(`/api/search?q=${encodeURIComponent(input.value)}`);
        const data = await response.json();

        if (data.success && searchResults) {
          searchResults.innerHTML = data.results.length > 0
            ? data.results.map((result: any) => `
                <a href="/posts/${result.slug}" class="block p-4 hover:bg-gray-50 rounded-lg">
                  <h4 class="font-semibold text-gray-900">${result.title}</h4>
                  <p class="text-sm text-gray-600 mt-1">${result.excerpt}</p>
                  <span class="text-xs text-blue-600 mt-2 block">${result.category} ‚Ä¢ ${result.date}</span>
                </a>
              `).join('')
            : '<p class="text-gray-500 text-center p-4">Nenhum resultado encontrado</p>';
          
          searchResults.classList.remove('hidden');
        }
      } catch (error) {
        console.error('Search error:', error);
      }
    }, 300);
  });

  // Auth and Like functionality
  let currentUser: User | null = null;
  
  // Check if user is logged in
  const storedUser = localStorage.getItem('user');
  const userId = storedUser ? JSON.parse(storedUser).id : '';

  document.querySelectorAll(".like-button").forEach(likeButton => {
    const buttonElement = likeButton as HTMLButtonElement;
    const postSlug = buttonElement.dataset.slug;

    if (!postSlug) {
      console.error("‚ö†Ô∏è postSlug n√£o encontrado para um dos bot√µes!");
      return;
    }

    console.log(`üìå postSlug encontrado: ${postSlug}`);

    // Atualiza status de curtida ao carregar a p√°gina
    const updateLikeStatus = async () => {
      try {
        console.log("üîÑ Buscando status do like...");
        const response = await fetch(`/api/likes?postSlug=${postSlug}&userId=${userId}`);
        const data = await response.json();

        if (data.success) {
          console.log("‚úÖ Resposta da API:", data);
          const countElement = buttonElement.querySelector(".like-count");
          if (countElement) {
            countElement.textContent = data.likesCount.toString();
          }
          buttonElement.classList.toggle("text-red-500", data.isLiked);
        }
      } catch (error) {
        console.error("‚ùå Erro ao obter status do like:", error);
      }
    };

    // Curtir/Descurtir
    buttonElement.addEventListener("click", async (e) => {
      e.preventDefault();

      if (!userId) {
        showLoginModal(buttonElement, postSlug);
        return;
      }

      try {
          const response = await fetch('/api/likes', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userId, postSlug }),
          });

          const data = await response.json();
          if (data.success) {
            const countElement = likeButton.querySelector('.like-count');
            if (countElement) {
              countElement.textContent = data.likesCount.toString();
            }
            likeButton.classList.toggle('text-red-500');
          } else {
            throw new Error(data.message);
          }
        } catch (error) {
          console.error('Erro ao processar like:', error);
          alert('Erro ao processar sua curtida. Tente novamente.');
        }
    });

    updateLikeStatus(); // Atualiza o status inicial do bot√£o SOMENTE UMA VEZ
  });


  function showLoginModal(likeButton: HTMLButtonElement, postSlug: string) {
  const modal = document.createElement("div");
  modal.className = "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50";
  modal.innerHTML = `
    <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
      <h3 class="text-xl font-semibold mb-4">Login para curtir</h3>
      <form id="login-form" class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700">Nome completo</label>
          <input type="text" name="name" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700">Email</label>
          <input type="email" name="email" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
        </div>
        <button type="submit" class="w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
          Entrar
        </button>
      </form>
    </div>
  `;

  document.body.appendChild(modal);

  const loginForm = modal.querySelector("#login-form") as HTMLFormElement;
  loginForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(loginForm);

    try {
      console.log("üì© Enviando requisi√ß√£o de login...");
      const response = await fetch("/api/auth", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: formData.get("name"),
          email: formData.get("email"),
        }),
      });

      const data = await response.json();
      console.log("‚úÖ Resposta da API ap√≥s login:", data);

      if (data.success) {
        // **üîπ Salvar usu√°rio no localStorage**
        localStorage.setItem("user", JSON.stringify(data.user));

        // **üîπ Fechar o modal**
        modal.remove();

        // **üîπ Tentar curtir automaticamente antes de recarregar a p√°gina**
        await likePost(likeButton, postSlug);

        // **üîπ Recarregar a p√°gina para refletir o estado atualizado**
      } else {
        alert("Erro ao fazer login. Tente novamente.");
      }
    } catch (error) {
      console.error("‚ùå Erro ao fazer login:", error);
      alert("Erro ao autenticar usu√°rio.");
    }
  });

  // **üîπ Fecha modal ao clicar fora**
  modal.addEventListener("click", (e) => {
    if (e.target === modal) {
      modal.remove();
    }
  });
}

// **üîπ Fun√ß√£o para curtir automaticamente ap√≥s login**
async function likePost(likeButton: HTMLButtonElement, postSlug: string) {
  try {
    const storedUser = localStorage.getItem("user");
    const userId = storedUser ? JSON.parse(storedUser).id : "";

    if (!userId) return;

    console.log("üì© Enviando like automaticamente...");
    const response = await fetch("/api/likes", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ userId, postSlug }),
    });

    const data = await response.json();
    console.log("‚úÖ Resposta da API ap√≥s like autom√°tico:", data);
  } catch (error) {
    console.error("‚ùå Erro ao curtir automaticamente:", error);
  }
}

  // Share functionality for posts
  const shareButton = document.querySelector('.fa-share-alt');
  if (shareButton) {
    const shareUrl = window.location.href;
    const shareTitle = document.title;

    shareButton.parentElement?.addEventListener('click', (e) => {
      e.preventDefault();
      if (navigator.share) {
        navigator.share({
          title: shareTitle,
          url: shareUrl
        });
      } else {
        // Create a temporary dropdown with share options
        const dropdown = document.createElement('div');
        dropdown.className = 'absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg py-2 z-50';
        dropdown.innerHTML = `
          <a href="https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}" target="_blank" class="block px-4 py-2 hover:bg-gray-100">
            <i class="fab fa-facebook mr-2"></i> Facebook
          </a>
          <a href="https://twitter.com/intent/tweet?url=${encodeURIComponent(shareUrl)}&text=${encodeURIComponent(shareTitle)}" target="_blank" class="block px-4 py-2 hover:bg-gray-100">
            <i class="fab fa-twitter mr-2"></i> Twitter
          </a>
          <a href="https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(shareUrl)}&title=${encodeURIComponent(shareTitle)}" target="_blank" class="block px-4 py-2 hover:bg-gray-100">
            <i class="fab fa-linkedin mr-2"></i> LinkedIn
          </a>
          <a href="https://api.whatsapp.com/send?text=${encodeURIComponent(shareTitle + ' ' + shareUrl)}" target="_blank" class="block px-4 py-2 hover:bg-gray-100">
            <i class="fab fa-whatsapp mr-2"></i> WhatsApp
          </a>
          <button class="block w-full text-left px-4 py-2 hover:bg-gray-100" onclick="navigator.clipboard.writeText('${shareUrl}'); alert('Link copiado!')">
            <i class="fas fa-link mr-2"></i> Copiar Link
          </button>
        `;

        // Position the dropdown
        const buttonRect = shareButton.getBoundingClientRect();
        dropdown.style.position = 'fixed';
        dropdown.style.top = buttonRect.bottom + 'px';
        dropdown.style.right = (window.innerWidth - buttonRect.right) + 'px';

        // Add to document
        document.body.appendChild(dropdown);

        // Close dropdown when clicking outside
        const closeDropdown = (e: MouseEvent) => {
          if (!dropdown.contains(e.target as Node)) {
            dropdown.remove();
            document.removeEventListener('click', closeDropdown);
          }
        };

        // Delay adding the event listener to prevent immediate closure
        setTimeout(() => {
          document.addEventListener('click', closeDropdown);
        }, 0);
      }
    });
  }
</script>

<script is:inline>
  document.addEventListener("DOMContentLoaded", function() {
    const buttons = document.querySelectorAll(".category-filter");
    const posts = document.querySelectorAll(".post");

    buttons.forEach(button => {
      button.addEventListener("click", function() {
        const selectedCategory = this.getAttribute("data-category");

        posts.forEach(post => {
          const postCategory = post.getAttribute("data-category");
          if (selectedCategory === "all" || postCategory === selectedCategory) {
            post.style.display = "block";
          } else {
            post.style.display = "none";
          }
        });
      });
    });
  });
</script>
