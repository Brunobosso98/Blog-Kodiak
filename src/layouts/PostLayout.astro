---
const { frontmatter } = Astro.props;
const { title, date, category, image, excerpt, author } = frontmatter;
const currentUrl = Astro.url.href;
---

<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title} | Blog Kodiak</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
  </head>
  <body class="bg-gray-50">
    <header class="bg-white shadow-sm">
      <div class="max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8">
        <nav class="flex justify-between items-center">
          <a href="/" class="text-2xl font-bold text-gray-900">Blog Kodiak</a>
          <div class="flex items-center space-x-4">
            <a href="/" class="text-gray-600 hover:text-gray-900">Home</a>
            <a href="/about" class="text-gray-600 hover:text-gray-900">Sobre</a>
            <a href="/contact" class="text-gray-600 hover:text-gray-900">Contato</a>
          </div>
        </nav>
      </div>
    </header>

    <main>
      <article class="max-w-4xl mx-auto py-8 px-4">
        <div class="mb-8">
          <img src={image} alt={title} class="w-full h-64 md:h-96 object-cover rounded-xl shadow-lg">
        </div>

        <div class="prose max-w-none">
          <div class="flex items-center gap-4 mb-6">
            <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium">
              {category}
            </span>
            <time class="text-gray-500 text-sm">{new Date(date).toLocaleDateString('pt-BR')}</time>
          </div>

          <h1 class="text-4xl font-bold text-gray-900 mb-4">{title}</h1>
          <p class="text-xl text-gray-600 mb-8">{excerpt}</p>

          {author && (
            <div class="flex items-center space-x-4 mb-8">
              <img
                src={author.image}
                alt={author.name}
                class="w-12 h-12 rounded-full"
              />
              <div>
                <h3 class="font-medium text-gray-900">{author.name}</h3>
                <p class="text-sm text-gray-600">{author.role}</p>
              </div>
            </div>
          )}

          <div class="flex items-center justify-between mb-8 border-b border-gray-200 pb-4">
            <div class="flex items-center space-x-4">
              <button id="like-button" class="flex items-center space-x-1 text-gray-500 hover:text-red-500 transition">
                <i class="fas fa-heart"></i>
                <span class="like-count text-sm">0</span>
              </button>
              <div class="relative">
                <button id="share-button" class="text-gray-500 hover:text-gray-700 transition">
                  <i class="fas fa-share-alt"></i>
                </button>
                <div id="share-dropdown" class="hidden absolute left-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5">
                  <div class="py-1" role="menu">
                    <button class="share-option w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" data-platform="facebook">
                      <i class="fab fa-facebook-f mr-2"></i> Facebook
                    </button>
                    <button class="share-option w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" data-platform="twitter">
                      <i class="fab fa-twitter mr-2"></i> Twitter
                    </button>
                    <button class="share-option w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" data-platform="linkedin">
                      <i class="fab fa-linkedin-in mr-2"></i> LinkedIn
                    </button>
                    <button class="share-option w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" data-platform="whatsapp">
                      <i class="fab fa-whatsapp mr-2"></i> WhatsApp
                    </button>
                    <button class="share-option w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" data-platform="copy">
                      <i class="fas fa-link mr-2"></i> Copiar Link
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="mt-8">
            <slot />
          </div>

          {author && (
            <footer class="mt-16 pt-8 border-t border-gray-200">
              <div class="flex items-center space-x-4">
                <img
                  src={author.image}
                  alt={author.name}
                  class="w-16 h-16 rounded-full"
                />
                <div>
                  <h3 class="font-medium text-gray-900">{author.name}</h3>
                  <p class="text-sm text-gray-600">{author.role}</p>
                  <p class="text-sm text-gray-500 mt-1">{author.bio}</p>
                </div>
              </div>
            </footer>
          )}
        </div>
      </article>
    </main>

    <footer class="bg-white border-t border-gray-200 mt-16">
      <div class="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
        <div class="text-center">
          <p class="text-gray-500">&copy; 2024 Blog Kodiak. Todos os direitos reservados.</p>
        </div>
      </div>
    </footer>
  </body>
</html>

<style is:global>
  .prose {
    max-width: 65ch;
    margin: 0 auto;
  }
  .prose h1 {
    font-size: 2.25em;
    margin-top: 0;
    margin-bottom: 0.8888889em;
    line-height: 1.1111111;
  }
  .prose h2 {
    font-size: 1.5em;
    margin-top: 2em;
    margin-bottom: 1em;
    line-height: 1.3333333;
  }
  .prose p {
    margin-top: 1.25em;
    margin-bottom: 1.25em;
  }
  .prose ul {
    margin-top: 1.25em;
    margin-bottom: 1.25em;
    padding-left: 1.625em;
  }
  .prose li {
    margin-top: 0.5em;
    margin-bottom: 0.5em;
  }
</style>

<script>
  const likeButton = document.getElementById('like-button');
  const shareButton = document.getElementById('share-button');
  const shareDropdown = document.getElementById('share-dropdown');
  const shareOptions = document.querySelectorAll('.share-option');
  const currentUrl = window.location.href;
  const postTitle = document.querySelector('h1')?.textContent || '';
  const postSlug = window.location.pathname.split('/').pop();

  // Likes
  const updateLikeStatus = async () => {
    if (!postSlug) return;

    try {
      const storedUser = localStorage.getItem('user');
      const userId = storedUser ? JSON.parse(storedUser).id : '';
      
      const response = await fetch(`/api/likes?postSlug=${postSlug}&userId=${userId}`);
      const data = await response.json();
      
      if (data.success) {
        const countElement = likeButton?.querySelector('.like-count');
        if (countElement) {
          countElement.textContent = data.likesCount.toString();
        }
        if (data.isLiked) {
          likeButton?.classList.add('text-red-500');
        } else {
          likeButton?.classList.remove('text-red-500');
        }
      }
    } catch (error) {
      console.error('Error getting like status:', error);
    }
  };

  updateLikeStatus();

  likeButton?.addEventListener('click', async () => {
    if (!postSlug) return;

    const storedUser = localStorage.getItem('user');
    if (!storedUser) {
      // Show login modal
      const modal = document.createElement('div');
      modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
      modal.innerHTML = `
        <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
          <h3 class="text-xl font-semibold mb-4">Login para curtir</h3>
          <form id="login-form" class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700">Nome completo</label>
              <input type="text" name="name" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700">Email</label>
              <input type="email" name="email" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
            </div>
            <button type="submit" class="w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
              Entrar
            </button>
          </form>
        </div>
      `;

      document.body.appendChild(modal);

      const loginForm = modal.querySelector('#login-form');
      loginForm?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(loginForm as HTMLFormElement);
        
        try {
          const response = await fetch('/api/auth', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              name: formData.get('name'),
              email: formData.get('email'),
            }),
          });

          const data = await response.json();
          if (data.success) {
            localStorage.setItem('user', JSON.stringify(data.user));
            modal.remove();
            updateLikeStatus();
          }
        } catch (error) {
          console.error('Login error:', error);
        }
      });

      // Close modal when clicking outside
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          modal.remove();
        }
      });
      
      return;
    }

    const user = JSON.parse(storedUser);
    try {
      const response = await fetch('/api/likes', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: user.id,
          postSlug,
        }),
      });

      const data = await response.json();
      if (data.success) {
        updateLikeStatus();
      }
    } catch (error) {
      console.error('Error toggling like:', error);
    }
  });

  // Share functionality
  shareButton?.addEventListener('click', () => {
    shareDropdown?.classList.toggle('hidden');
  });

  // Close dropdown when clicking outside
  document.addEventListener('click', (e) => {
    if (!shareButton?.contains(e.target as Node)) {
      shareDropdown?.classList.add('hidden');
    }
  });

  // Share options
  shareOptions.forEach(option => {
    option.addEventListener('click', async () => {
      const platform = option.getAttribute('data-platform');
      let shareUrl = '';

      switch (platform) {
        case 'facebook':
          shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(currentUrl)}`;
          break;
        case 'twitter':
          shareUrl = `https://twitter.com/intent/tweet?url=${encodeURIComponent(currentUrl)}&text=${encodeURIComponent(postTitle)}`;
          break;
        case 'linkedin':
          shareUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(currentUrl)}`;
          break;
        case 'whatsapp':
          shareUrl = `https://api.whatsapp.com/send?text=${encodeURIComponent(postTitle + ' ' + currentUrl)}`;
          break;
        case 'copy':
          try {
            await navigator.clipboard.writeText(currentUrl);
            alert('Link copiado para a área de transferência!');
          } catch (err) {
            console.error('Error copying link:', err);
          }
          break;
      }

      if (shareUrl) {
        window.open(shareUrl, '_blank', 'width=600,height=400');
      }

      shareDropdown?.classList.add('hidden');
    });
  });
</script>